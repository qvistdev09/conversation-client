{"version":3,"sources":["logo.svg","config/server-url.js","App.js","reportWebVitals.js","index.js"],"names":["nodeEnv","process","serverPaths","production","development","getServer","App","useState","serverGreeting","setServerGreeting","client","useRef","useEffect","current","io","socket","on","message","close","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAAe,MAA0B,iCCAnCA,G,MAAUC,cAEVC,EAAc,CAClBC,WAAY,0CACZC,YAAa,yBAKAC,EAFG,kBAAMH,EAAYF,GAAWE,EAAYF,GAAWE,EAAYE,a,OCmCnEE,EAhCH,WAAO,IAAD,EAC4BC,mBAAS,+BADrC,mBACTC,EADS,KACOC,EADP,KAEVC,EAASC,mBAYf,OAVAC,qBAAU,WACRF,EAAOG,QAAUC,aAAGT,KACpB,IAAMU,EAASL,EAAOG,QAGtB,OAFAE,EAAOC,GAAG,mBAAmB,SAAAC,GAAO,OAAIR,EAAkBQ,MAEnD,WACLF,EAAOG,WAER,IAGD,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAGA,0DAvBQrB,gBAwBR,gDAAmBI,OACnB,kDAAqBG,KACrB,mBAAGW,UAAU,WAAWI,KAAK,sBAAsBC,OAAO,SAASC,IAAI,sBAAvE,+BCtBOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9fe15ffe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const nodeEnv = process.env.NODE_ENV;\n\nconst serverPaths = {\n  production: 'https://tiny-conversation.herokuapp.com',\n  development: 'http://localhost:8080',\n}\n\nconst getServer = () => serverPaths[nodeEnv] ? serverPaths[nodeEnv] : serverPaths.development;\n\nexport default getServer;\n\n\n","import React, { useRef, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport getServer from 'config/server-url';\n\nconst nodeEnv = process.env.NODE_ENV;\n\nconst App = () => {\n  const [serverGreeting, setServerGreeting] = useState('waiting for server response');\n  const client = useRef();\n\n  useEffect(() => {\n    client.current = io(getServer());\n    const socket = client.current;\n    socket.on('connection-test', message => setServerGreeting(message));\n\n    return () => {\n      socket.close();\n    }\n  }, []);\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <img src={logo} className='App-logo' alt='logo' />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <p>The node environment is: {nodeEnv}</p>\n        <p>The server is: {getServer()}</p>\n        <p>Connection test: {serverGreeting}</p>\n        <a className='App-link' href='https://reactjs.org' target='_blank' rel='noopener noreferrer'>\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
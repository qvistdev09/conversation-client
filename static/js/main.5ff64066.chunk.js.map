{"version":3,"sources":["config/server-url.js","components/Header.js","components/Header-User.js","components/Conversations.js","components/Conversations-Add-Channel-Btn.js","components/Chat.js","components/Chat-Content.js","components/Users.js","components/App.js","reportWebVitals.js","index.js"],"names":["nodeEnv","process","serverPaths","production","development","getServer","Header","children","className","User","userName","setUserName","useState","usernameEdit","setUsernameEdit","inputValue","setInputValue","useEffect","input","document","querySelector","focus","onSubmit","e","preventDefault","type","value","onChange","target","onBlur","onClick","Conversations","channelList","emitActiveConversation","activeConversation","map","channel","id","label","AddChannelBtn","createChannel","edit","setEdit","Chat","send","messages","alertTyping","usersTyping","message","setMessage","container","scrollTop","scrollHeight","ChatContent","user","messageObj","timeString","dateObj","Date","getHours","getMinutes","formatTimeStamp","time","text","Users","userlist","name","pubId","App","setUserlist","setChannelList","setActiveConversation","setMessages","userId","setUserId","setUsersTyping","client","useRef","current","io","socket","on","usersArray","channelsArray","messagesArray","receivedId","usersTypingArray","close","getName","match","find","newUsername","emit","undefined","by","filtered","filter","length","alert","forEach","index","formatTypingAlert","online","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5ff64066.chunk.js","sourcesContent":["const nodeEnv = process.env.NODE_ENV;\n\nconst serverPaths = {\n  production: 'https://tiny-conversation.herokuapp.com',\n  development: 'http://localhost:8080',\n}\n\nconst getServer = () => serverPaths[nodeEnv] ? serverPaths[nodeEnv] : serverPaths.development;\n\nexport default getServer;\n\n\n","import React from 'react';\nimport 'components/Header.scss';\n\nconst Header = ({ children }) => {\n  return (\n    <header className='header'>\n      <p>App title</p>\n      {children}\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\n\nconst User = ({ userName, setUserName }) => {\n  const [usernameEdit, setUsernameEdit] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    const input = document.querySelector('.header__username-input');\n    if (input) {\n      input.focus();\n    }\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setUserName(inputValue);\n    setInputValue('');\n    setUsernameEdit(false);\n  };\n\n  const startEdit = () => {\n    setInputValue(userName);\n    setUsernameEdit(true);\n  }\n\n  return (\n    <div className='header__user'>\n      {usernameEdit ? (\n        <form onSubmit={handleSubmit}>\n          <input\n            type='text'\n            value={inputValue}\n            onChange={e => setInputValue(e.target.value)}\n            onBlur={() => setUsernameEdit(false)}\n            className='header__username-input'\n          />\n        </form>\n      ) : (\n        <button onClick={startEdit}>{userName}</button>\n      )}\n    </div>\n  );\n};\n\nexport default User;\n","import React from 'react';\nimport 'components/Conversations.scss';\n\nconst Conversations = ({ channelList, emitActiveConversation, activeConversation, children }) => {\n  const btnClass = id => {\n    const status = id === activeConversation ? 'active' : 'inactive';\n    return `conversations__channelBtn conversations__channelBtn--${status}`;\n  };\n\n  return (\n    <nav className='conversations'>\n      {channelList.map(channel => (\n        <button className={btnClass(channel.id)} key={channel.id} onClick={() => emitActiveConversation(channel.id)}>\n          {channel.label}\n        </button>\n      ))}\n      {children}\n    </nav>\n  );\n};\n\nexport default Conversations;\n","import React, { useState, useEffect } from 'react';\n\nconst AddChannelBtn = ({ createChannel }) => {\n  const [edit, setEdit] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    const input = document.querySelector('.conversations__new-channel-input');\n    if (input) {\n      input.focus();\n    }\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    createChannel(inputValue);\n    setInputValue('');\n    setEdit(false);\n  };\n\n  return (\n    <div className='conversations__add-channel-btn'>\n      {edit ? (\n        <form onSubmit={handleSubmit}>\n          <input\n            type='text'\n            onBlur={() => setEdit(false)}\n            className='conversations__new-channel-input'\n            value={inputValue}\n            onChange={e => setInputValue(e.target.value)}\n          />\n        </form>\n      ) : (\n        <button onClick={() => setEdit(true)}>Add Channel</button>\n      )}\n    </div>\n  );\n};\n\nexport default AddChannelBtn;\n","import React, { useState, useEffect } from 'react';\nimport 'components/Chat.scss';\n\nconst Chat = ({ send, children, messages, alertTyping, usersTyping }) => {\n  const [message, setMessage] = useState('');\n\n  const onSubmit = e => {\n    e.preventDefault();\n    send(message);\n    setMessage('');\n  };\n\n  useEffect(() => {\n    const container = document.querySelector('.chat__messages');\n    container.scrollTop = container.scrollHeight;\n  }, [messages]);\n\n  const handleOnChange = e => {\n    alertTyping();\n    setMessage(e.target.value);\n  };\n\n  return (\n    <main className='chat'>\n      <div className='chat__messages'>{children}</div>\n      <div>\n        <p>{usersTyping}</p>\n        <form className='chat__form' onSubmit={onSubmit}>\n          <input type='text' className='chat__input' value={message} onChange={handleOnChange} />\n          <button className='chat__button'>Send</button>\n        </form>\n      </div>\n    </main>\n  );\n};\n\nexport default Chat;\n","import React from 'react';\n\nconst ChatContent = ({ user, messageObj }) => {\n  const formatTimeStamp = timeString => {\n    const dateObj = new Date(timeString);\n    return dateObj.getHours() + ':' + (dateObj.getMinutes() < 10 ? `0${dateObj.getMinutes()}` : dateObj.getMinutes());\n  };\n\n  return (\n    <div className='chat__content'>\n      <div className='chat__content-header'>\n        <p>{user}</p>\n        <p>{formatTimeStamp(messageObj.time)}</p>\n      </div>\n      <p className='chat__content-text'>{messageObj.text}</p>\n    </div>\n  );\n};\n\nexport default ChatContent;\n","import React from 'react';\nimport 'components/Users.scss';\n\nconst Users = ({ userlist = [] }) => {\n  return (\n    <aside className='users'>\n      {userlist.map(user => (\n        <p key={user.pubId}>{user.name}</p>\n      ))}\n    </aside>\n  );\n};\n\nexport default Users;\n","import React, { useRef, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport getServer from 'config/server-url';\n\nimport 'components/App.scss';\n\n// components\n\nimport Header from 'components/Header';\nimport User from 'components/Header-User';\nimport Conversations from 'components/Conversations';\nimport AddChannelBtn from 'components/Conversations-Add-Channel-Btn';\nimport Chat from 'components/Chat';\nimport ChatContent from 'components/Chat-Content';\nimport Users from 'components/Users';\n\nconst App = () => {\n  const [userlist, setUserlist] = useState([]);\n  const [channelList, setChannelList] = useState([]);\n  const [activeConversation, setActiveConversation] = useState(0);\n  const [messages, setMessages] = useState([]);\n  const [userId, setUserId] = useState();\n  const [usersTyping, setUsersTyping] = useState([]);\n  const client = useRef();\n\n  useEffect(() => {\n    client.current = io(getServer());\n    const socket = client.current;\n    socket.on('user-list', usersArray => setUserlist(usersArray));\n    socket.on('channel-list', channelsArray => setChannelList(channelsArray));\n    socket.on('channel-message', messagesArray => setMessages(messagesArray));\n    socket.on('user-id', receivedId => setUserId(receivedId));\n    socket.on('users-typing', usersTypingArray => setUsersTyping(usersTypingArray));\n\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  const send = message => {\n    if (userId !== undefined) {\n      client.current.emit('message', { text: message, id: activeConversation, by: userId });\n    }\n  };\n\n  const emitActiveConversation = id => {\n    setActiveConversation(id);\n    client.current.emit('set-active', id);\n  };\n\n  const createChannel = label => {\n    client.current.emit('create-channel', label);\n  };\n\n  const setUserName = newUsername => {\n    client.current.emit('update-name', newUsername);\n  };\n\n  const getName = id => {\n    const match = userlist.find(user => user.pubId === id);\n    return match ? match.name : 'Missing';\n  };\n\n  const alertTyping = () => {\n    client.current.emit('is-typing');\n  };\n\n  const formatTypingAlert = () => {\n    const filtered = usersTyping.filter(id => id !== userId);\n    if (filtered.length === 1) {\n      return `${getName(filtered[0])} is typing`;\n    }\n    if (filtered.length < 3) {\n      let alert = '';\n      filtered.forEach((user, index) => {\n        if (index !== filtered.length - 1) {\n          alert += `${getName(user)}, `;\n        } else {\n          alert += `and ${getName(user)} are typing`;\n        }\n      });\n      return alert;\n    }\n    return 'Several people are typing';\n  };\n\n  return (\n    <div className='app'>\n      <Header>\n        <User userName={getName(userId)} setUserName={setUserName} />\n      </Header>\n      <Conversations\n        channelList={channelList}\n        emitActiveConversation={emitActiveConversation}\n        activeConversation={activeConversation}\n      >\n        <AddChannelBtn createChannel={createChannel} />\n      </Conversations>\n      <Chat send={send} messages={messages} alertTyping={alertTyping} usersTyping={formatTypingAlert()}>\n        {messages.map(messageObj => (\n          <ChatContent user={getName(messageObj.by)} messageObj={messageObj} key={messageObj.id} />\n        ))}\n      </Chat>\n      <Users userlist={userlist.filter(user => user.online)} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'styles/reset.scss';\nimport 'styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}